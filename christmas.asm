org 0x7c00
bits 16

jmp start

counter dw 0
start:
	; move the cursor over a bit
	mov ah, 0x9
	mov cx, 1
	mov dx, 0x0
	mov al, ' '
	mov bl, 0x02
	mov bh, 0x0
	int 0x10
	mov ah, 0x3
	int 0x10
	mov dh, 0x8
	mov dl, 0x21
	mov ah, 0x2
	int 0x10

	mov word [counter], 0
	.loop:
	; over here we load from ctree and color into al and bl respectively but i suck at assembly so i had to do it in a very funny way
	mov dx, [counter]
	mov ah, 0x9
	mov si, color
	add si, dx
	lodsb
	mov bl, al
	mov si, ctree
	add si, dx
	lodsb
	inc dx
	mov [counter], dx ; i couldnt figure why this was broken originally and its too annoying to explain how it broke but just imagine you thinking im really smart for figuring it out

	cmp al, 0x0
	je .end

	cmp al, 0xA
	je .endline

	mov ah, 0x9
	mov cx, 1	
	int 0x10 ; print it!1

	mov ah, 0x3
	int 0x10
	inc dl ; move cursor to the right
	mov ah, 0x2
	int 0x10
	jmp .loop 

	.endline:
	mov ah, 0x3
	int 0x10
	mov dl, 0x20 ; reset cursor to the left
	mov ah, 0x2
	add dh, 1 ; move the cursor down a row
	int 0x10
	jmp .loop
	.end:
	
	mov ah, 0x1
	mov cx, 0x2607
	int 0x10 ; hide the cursor

	jmp $
ctree: ; oh god

; The design for the Christmas tree is not my own;
; all credit for the tree text goes to
; https://delightlylinux.wordpress.com/2021/12/23/a-simple-ascii-christmas-tree-in-bash/
; The colorization, however, was done by myself.
db "    *", 0xA, 0xD
db "   /.", 0x5C, 0xA, 0xD
db "  /o..", 0x5C, 0xA, 0xD
db "  /..o", 0x5C, 0xA, 0xD
db " /.o..o", 0x5C, 0xA, 0xD
db " /...o.", 0x5C, 0xA, 0xD
db "/..o....", 0x5C, 0xA, 0xD
db "^^^[_]^^^", 0xA, 0xD

db 0x0

color: ; lord forgive me
times 4 db 0x0
db 0x0E, 0x0, 0x0

times 3 db 0x0
db 0x02, 0x02, 0x02, 0x0, 0x0

times 2 db 0x0
db 0x02, 0x04, 0x02, 0x02, 0x02, 0x0, 0x0

times 2 db 0x0
db 0x02, 0x02, 0x02, 0x01, 0x02, 0x0, 0x0

db 0x0
db 0x02, 0x02, 0x04, 0x02, 0x02, 0x01, 0x02, 0x0, 0x0

db 0x0
db 0x02, 0x02, 0x02, 0x02, 0x04, 0x02, 0x02, 0x0, 0x0

db 0x02, 0x02, 0x02, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0, 0x0
db 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x02, 0x02, 0x02, 0x0, 0x0
db 0x0

times 510 - ($ - $$) db 0
dw 0xAA55	
